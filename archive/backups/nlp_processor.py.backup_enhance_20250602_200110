"""
NLP处理器 - 修复JSON解析问题
"""

import os
import json
import re
import requests
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass

from ..command_parser import ParsedCommand, CommandType

logger = logging.getLogger(__name__)


@dataclass
class NLPConfig:
    """NLP配置"""
    enable_llm: bool = True
    llm_provider: str = "deepseek"
    api_key: str = ""
    fallback_to_rules: bool = True
    confidence_threshold: float = 0.7


class NLPProcessor:
    """NLP处理器 - 修复JSON解析"""
    
    def __init__(self, command_parser=None, config: Optional[NLPConfig] = None):
        self.command_parser = command_parser
        self.config = config or NLPConfig()
        
        # 从环境变量获取API密钥
        if not self.config.api_key:
            self.config.api_key = os.getenv('DEEPSEEK_API_KEY', '')
        
        if not self.config.api_key:
            logger.warning("未设置DEEPSEEK_API_KEY，NLP功能将降级")
            self.config.enable_llm = False
        
        self.api_url = "https://api.deepseek.com/v1/chat/completions"
    
    def parse(self, user_input: str, context: Optional[Dict[str, Any]] = None) -> ParsedCommand:
        """解析用户输入 - 优先DeepSeek API"""
        
        if not user_input.strip():
            return ParsedCommand(
                command_type=CommandType.UNKNOWN,
                raw_text=user_input,
                confidence=0
            )
        
        # 1. 如果启用了LLM，优先使用DeepSeek
        if self.config.enable_llm and self.config.api_key:
            try:
                api_result = self._call_deepseek(user_input, context)
                if api_result and api_result.confidence > 0.3:
                    logger.info(f"DeepSeek解析成功: {api_result.command_type} (置信度:{api_result.confidence})")
                    return api_result
            except Exception as e:
                logger.error(f"DeepSeek API错误: {e}")
        
        # 2. 尝试本地解析
        if self.command_parser:
            local_result = self.command_parser.parse(user_input)
            if local_result.confidence > 0:
                return local_result
        
        # 3. 模糊匹配
        fuzzy_result = self._fuzzy_parse(user_input)
        if fuzzy_result.confidence > 0:
            return fuzzy_result
        
        # 4. 无法理解
        return ParsedCommand(
            command_type=CommandType.UNKNOWN,
            raw_text=user_input,
            confidence=0,
            parameters={"suggestions": self._get_suggestions(user_input)}
        )
    
    def _parse_deepseek_json(self, raw_response: str) -> Optional[Dict[str, Any]]:
        """解析DeepSeek返回的JSON（处理markdown代码块）"""
        
        # 方法1: 尝试直接解析
        try:
            return json.loads(raw_response)
        except json.JSONDecodeError:
            pass
        
        # 方法2: 去除markdown代码块标记
        # 匹配 ```json 或 ``` 包裹的内容
        patterns = [
            r'```json\s*\n?([\s\S]*?)\n?```',  # ```json ... ```
            r'```\s*\n?([\s\S]*?)\n?```',      # ``` ... ```
            r'\{[\s\S]*\}'                      # 直接匹配JSON对象
        ]
        
        for pattern in patterns:
            match = re.search(pattern, raw_response, re.MULTILINE)
            if match:
                json_str = match.group(1) if len(match.groups()) > 0 else match.group(0)
                try:
                    return json.loads(json_str.strip())
                except json.JSONDecodeError as e:
                    logger.debug(f"JSON解析失败 (pattern {pattern}): {e}")
                    continue
        
        # 方法3: 查找第一个{到最后一个}
        start = raw_response.find('{')
        end = raw_response.rfind('}')
        if start >= 0 and end > start:
            json_str = raw_response[start:end+1]
            try:
                return json.loads(json_str)
            except json.JSONDecodeError as e:
                logger.error(f"最终JSON解析失败: {e}")
        
        return None
    
    def _call_deepseek(self, text: str, context: Optional[Dict[str, Any]] = None) -> Optional[ParsedCommand]:
        """调用DeepSeek API"""
        
        system_prompt = """你是游戏NLP解析器。将玩家输入转换为游戏命令。

命令类型:
- ATTACK: 攻击
- USE_SKILL: 使用技能  
- DEFEND: 防御
- FLEE: 逃跑
- CULTIVATE: 修炼
- STATUS: 查看状态
- INVENTORY: 背包
- SKILLS: 技能列表
- MAP: 地图
- EXPLORE: 探索
- MOVE: 移动
- TALK: 对话
- BREAKTHROUGH: 突破

返回JSON格式(不要加markdown标记):
{
    "command": "命令类型",
    "target": "目标",
    "parameters": {},
    "confidence": 0.0-1.0,
    "reasoning": "解析理由"
}"""
        
        headers = {
            "Authorization": f"Bearer {self.config.api_key}",
            "Content-Type": "application/json"
        }
        
        response = requests.post(
            self.api_url,
            headers=headers,
            json={
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"解析玩家输入: {text}"}
                ],
                "temperature": 0.2,
                "max_tokens": 200
            },
            timeout=15
        )
        
        if response.status_code == 200:
            content = response.json()['choices'][0]['message']['content']
            logger.debug(f"DeepSeek原始返回: {content}")
            
            # 使用新的JSON解析方法
            parsed = self._parse_deepseek_json(content)
            
            if parsed:
                # 映射命令类型
                cmd_str = parsed.get("command", "UNKNOWN").upper()
                try:
                    command_type = CommandType(cmd_str)
                except ValueError:
                    # 如果CommandType没有这个值，尝试映射
                    cmd_map = {
                        "ATTACK": CommandType.ATTACK,
                        "USE_SKILL": CommandType.USE_SKILL,
                        "CULTIVATE": CommandType.CULTIVATE,
                        "STATUS": CommandType.STATUS,
                        "TALK": CommandType.TALK,
                        "MOVE": CommandType.MOVE,
                        "EXPLORE": CommandType.EXPLORE,
                        "BREAKTHROUGH": getattr(CommandType, 'BREAKTHROUGH', CommandType.UNKNOWN)
                    }
                    command_type = cmd_map.get(cmd_str, CommandType.UNKNOWN)
                
                return ParsedCommand(
                    command_type=command_type,
                    target=parsed.get("target"),
                    parameters=parsed.get("parameters", {}),
                    raw_text=text,
                    confidence=float(parsed.get("confidence", 0.7))
                )
            else:
                logger.error("无法解析DeepSeek返回的JSON")
                # 降级到文本解析
                return self._parse_text_response(content, text)
        
        return None
    
    def _parse_text_response(self, response_text: str, original_input: str) -> ParsedCommand:
        """从文本响应提取命令（降级方案）"""
        response_lower = response_text.lower()
        
        # 基于关键词匹配
        keyword_map = {
            ("attack", "攻击"): (CommandType.ATTACK, 0.7),
            ("skill", "技能", "剑气斩"): (CommandType.USE_SKILL, 0.7),
            ("cultivate", "修炼"): (CommandType.CULTIVATE, 0.8),
            ("status", "状态"): (CommandType.STATUS, 0.9),
            ("talk", "对话", "聊天"): (CommandType.TALK, 0.7),
            ("move", "移动", "去"): (CommandType.MOVE, 0.7),
            ("breakthrough", "突破"): (getattr(CommandType, 'BREAKTHROUGH', CommandType.UNKNOWN), 0.8)
        }
        
        for keywords, (cmd_type, confidence) in keyword_map.items():
            if any(kw in response_lower for kw in keywords):
                params = {}
                
                # 尝试提取参数
                if cmd_type == CommandType.USE_SKILL and "剑气斩" in response_lower:
                    params["skill"] = "剑气斩"
                elif cmd_type == CommandType.TALK:
                    # 提取NPC名字
                    if "王老板" in response_lower:
                        params["npc"] = "王老板"
                
                return ParsedCommand(
                    command_type=cmd_type,
                    target=self._extract_target_from_response(response_text),
                    parameters=params,
                    raw_text=original_input,
                    confidence=confidence
                )
        
        return ParsedCommand(
            command_type=CommandType.UNKNOWN,
            raw_text=original_input,
            confidence=0
        )
    
    def _extract_target_from_response(self, response: str) -> Optional[str]:
        """从响应中提取目标"""
        targets = ["敌人", "妖兽", "怪物", "王老板", "坊市"]
        for target in targets:
            if target in response:
                return target
        return None
    
    def _fuzzy_parse(self, text: str) -> ParsedCommand:
        """模糊匹配"""
        text_lower = text.lower()
        
        # 修炼
        if any(w in text_lower for w in ["修炼", "修行", "打坐"]):
            # 提取时长
            import re
            duration_match = re.search(r'(\d+)\s*([年月天日时])', text)
            params = {}
            if duration_match:
                params["duration"] = f"{duration_match.group(1)}{duration_match.group(2)}"
            
            return ParsedCommand(
                command_type=CommandType.CULTIVATE,
                parameters=params,
                raw_text=text,
                confidence=0.8
            )
        
        # 攻击
        elif any(w in text_lower for w in ["攻击", "打", "杀"]):
            return ParsedCommand(
                command_type=CommandType.ATTACK,
                target="敌人",
                raw_text=text,
                confidence=0.7
            )
        
        # 状态
        elif any(w in text_lower for w in ["状态", "属性", "面板"]):
            return ParsedCommand(
                command_type=CommandType.STATUS,
                raw_text=text,
                confidence=0.9
            )
        
        # 技能使用
        elif "剑气斩" in text_lower or ("用" in text_lower and "斩" in text_lower):
            return ParsedCommand(
                command_type=CommandType.USE_SKILL,
                target="敌人",
                parameters={"skill": "剑气斩"},
                raw_text=text,
                confidence=0.8
            )
        
        # 对话
        elif any(w in text_lower for w in ["聊", "说话", "对话"]):
            # 提取NPC
            npc = None
            if "王老板" in text_lower:
                npc = "王老板"
            
            return ParsedCommand(
                command_type=CommandType.TALK,
                target=npc,
                parameters={"npc": npc} if npc else {},
                raw_text=text,
                confidence=0.7
            )
        
        return ParsedCommand(
            command_type=CommandType.UNKNOWN,
            raw_text=text,
            confidence=0
        )
    
    def _get_suggestions(self, text: str) -> list:
        """获取建议"""
        suggestions = []
        text_lower = text.lower()
        
        if "修" in text_lower:
            suggestions.extend(["修炼1天", "修炼1年"])
        if "攻" in text_lower or "打" in text_lower:
            suggestions.extend(["攻击敌人", "使用剑气斩"])
        if "聊" in text_lower or "说" in text_lower:
            suggestions.extend(["和王老板聊天", "和NPC对话"])
        
        if not suggestions:
            suggestions = ["查看状态", "查看地图", "修炼", "探索周围"]
        
        return suggestions[:5]
    
    def process(self, *args, **kwargs):
        """兼容旧接口"""
        import warnings
        warnings.warn("process()已废弃，请使用parse()", DeprecationWarning)
        if args:
            return self.parse(args[0], args[1] if len(args) > 1 else None)
        return self.parse(kwargs.get('user_input', ''), kwargs.get('context'))


# 确保命令类型存在
for cmd in ['BREAKTHROUGH', 'CULTIVATE', 'TALK', 'EXPLORE']:
    if not hasattr(CommandType, cmd):
        setattr(CommandType, cmd, cmd.lower())
