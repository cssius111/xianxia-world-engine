name: XWE V2 CI

on:
  push:
    branches: [ main, develop, feature/v2-* ]
    paths:
      - 'xwe_v2/**'
      - 'tests/v2/**'
      - 'pyproject.toml'
      - '.github/workflows/v2-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'xwe_v2/**'
      - 'tests/v2/**'

env:
  PYTHON_VERSION: "3.12"
  XWE_USE_V2: "true"

jobs:
  type-check:
    name: Type Check (mypy)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Run mypy strict
      run: |
        poetry run mypy xwe_v2 --strict
        poetry run mypy tests/v2 --strict

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Run ${{ matrix.test-type }} tests
      run: |
        poetry run pytest tests/v2/${{ matrix.test-type }} \
          --cov=xwe_v2 \
          --cov-report=xml \
          --cov-report=term-missing \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: v2-${{ matrix.test-type }}
        name: v2-${{ matrix.test-type }}

  lint:
    name: Lint & Format
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Run Black
      run: poetry run black xwe_v2 tests/v2 --check

    - name: Run Ruff
      run: poetry run ruff check xwe_v2 tests/v2

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit
      run: |
        pip install bandit[toml]
        bandit -r xwe_v2 -ll

    - name: Run Safety check
      run: |
        pip install safety
        safety check

  compatibility:
    name: Backwards Compatibility
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: Test import redirection
      run: |
        python -c "
        import os
        os.environ['XWE_USE_V2'] = 'true'
        import xwe
        print('Import redirection working')
        "

    - name: Test feature flags
      run: |
        poetry run python -c "
        from xwe_v2.config import FeatureFlags, MigrationPhase
        flags = FeatureFlags()
        print(f'Current phase: {flags.current_phase}')
        "

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev

    - name: Run benchmarks
      run: |
        poetry run pytest benchmarks/ --benchmark-only \
          --benchmark-json=benchmark_results.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [type-check, test, lint]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Build distribution
      run: poetry build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser

    - name: Build docs
      run: |
        cd docs
        make html

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
